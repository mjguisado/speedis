services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    volumes:
      - ./3rparties/prometheus:/etc/prometheus
      - prom_data:/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./3rparties/grafana:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus 
  redis:
    image: redis/redis-stack-server
    container_name: redis
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 10s
      timeout: 2s
      interval: 5s
      retries: 5
  keycloak:
    image: mjguisado/keycloak:latest
    pull_policy: build
    build:
      context: .
      dockerfile: Dockerfile.keycloak
    container_name: keycloak
    command: start-dev
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HTTPS_CERTIFICATE_FILE=/opt/keycloak/conf/certs/keycloak.crt
      - KC_HTTPS_CERTIFICATE_KEY_FILE=/opt/keycloak/conf/certs/keycloak.key
    volumes:
      - ./3rparties/keycloak/certs:/opt/keycloak/conf/certs:ro
      - ./3rparties/haproxy/mocks.crt:/opt/keycloak/conf/truststores/mocks.pem:ro
      - keycloak_data:/opt/keycloak/data
    ports:
      - 8080:8080
      - 8443:8443
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://localhost:8443/realms/master"]
      start_period: 10s
      timeout: 2s
      interval: 5s
      retries: 5      
  mocks:
    image: mjguisado/mocks:latest
    pull_policy: build
    build:
      context: .
      dockerfile: Dockerfile.mocks
    container_name: mocks
    restart: unless-stopped
    develop:
      watch:
        - action: rebuild
          path: package*.json
        - action: sync
          path: ./mocks
          target: /usr/src/app/mocks
    ports:
      - 3030:3030
  speedis:
    image: mjguisado/speedis:latest
    pull_policy: build
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: speedis
    restart: unless-stopped
    profiles:
      - develop
    develop:
      watch:
        - action: rebuild
          path: package*.json
        - action: sync
          path: ./src
          target: /usr/src/app/src
    environment:
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    ports:
      - 3001:3001
      - 3003:3003
      - "9229-9249:9229-9249"
    depends_on:
      mocks:
        condition: service_started
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
  haproxy:
    image: haproxy:latest
    container_name: haproxy
    restart: always
    ports:
      - 80:80
      - 443:443
      - 8405:8405
    volumes:
      - ./3rparties/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./3rparties/haproxy/certs:/usr/local/etc/haproxy/certs:ro
    depends_on:
      - speedis
volumes:
  prom_data:
  keycloak_data:
